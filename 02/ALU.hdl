CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    //Seleccion si la x y y son cero
    Mux16(a=x, b=false, sel=zx, out=x1);
    Mux16(a=y, b=false, sel=zy, out=y1);

    //Combinacion nx,ny
    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);
    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);

    //f con las salidas anteriores
    And16(a=x2, b=y2, out=xandy);
    Add16(a=x2, b=y2, out=xplusy);
    Mux16(a=xandy, b=xplusy, sel=f, out=xy);

    // negamos la salida
    Not16(in=xy, out=notxy);
    Mux16(a=xy, b=notxy, sel=no, out[15]=ng, out[0..7]=part1, out[8..15]=part2, out=out);

    //si todas las salidas son cero
    Not(in=nonzero, out=zr);
    Or(a=or1, b=or2, out=nonzero); // si cualquiera de los numeros son nz
    Or8Way(in=part1, out=or1); // si cualquiera de las 2 partes de (8 bits) del numero son cero
    Or8Way(in=part2, out=or2);

}
